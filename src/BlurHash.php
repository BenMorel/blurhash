<?php

namespace Bepsvpt\Blurhash;

use Intervention\Image\Constraint;
use Intervention\Image\ImageManager;

final class BlurHash
{
    /**
     * RGB value to linear map.
     *
     * Function calls and math calculation is expensive.
     * Thus, we hard code all possible transfer value.
     *
     * @var float[]
     */
    protected static $rgbToLinearMap = [
        0 => 0.000000000000000000000000,
        1 => 0.000303526983548837515133,
        2 => 0.000607053967097675030266,
        3 => 0.000910580950646512491189,
        4 => 0.001214107934195350060533,
        5 => 0.001517634917744187413036,
        6 => 0.001821161901293024982379,
        7 => 0.002124688884841862551722,
        8 => 0.002428215868390700121066,
        9 => 0.002731742851939537256728,
        10 => 0.003035269835488374826071,
        11 => 0.003346535763899160815377,
        12 => 0.003676507324047435885245,
        13 => 0.004024717018496306621123,
        14 => 0.004391442037410293354471,
        15 => 0.004776953480693729194029,
        16 => 0.005181516702338385960136,
        17 => 0.005605391624202722862524,
        18 => 0.006048833022857053910715,
        19 => 0.006512090792594475187338,
        20 => 0.006995410187265386874056,
        21 => 0.007499032043226175336947,
        22 => 0.008023192985384994257991,
        23 => 0.008568125618069306892455,
        24 => 0.009134058702220787182013,
        25 => 0.009721217320237849138231,
        26 => 0.010329823029626936450875,
        27 => 0.010960094006488245790831,
        28 => 0.011612245179743884912482,
        29 => 0.012286488356915871780761,
        30 => 0.012983032342173012399500,
        31 => 0.013702083047289686373871,
        32 => 0.014443843596092544728782,
        33 => 0.015208514422912709426750,
        34 => 0.015996293365509631212440,
        35 => 0.016807375752887383779655,
        36 => 0.017641954488384077592844,
        37 => 0.018500220128379697009935,
        38 => 0.019382360956935722889893,
        39 => 0.020288563056652400562463,
        40 => 0.021219010376003554635416,
        41 => 0.022173884793387381442198,
        42 => 0.023153366178110409978608,
        43 => 0.024157632448504755967589,
        44 => 0.025186859627361630337150,
        45 => 0.026241221894849897644519,
        46 => 0.027320891639074893625372,
        47 => 0.028426039504420793496697,
        48 => 0.029556834437808800208902,
        49 => 0.030713443732993634532891,
        50 => 0.031896033073011531566721,
        51 => 0.033104766570885055254614,
        52 => 0.034339806808682170335967,
        53 => 0.035601314875020342864964,
        54 => 0.036889450401100039311775,
        55 => 0.038204371595346502121782,
        56 => 0.039546235276732837060631,
        57 => 0.040915196906853190661479,
        58 => 0.042311410620809675187104,
        59 => 0.043735029256973464995006,
        60 => 0.045186204385675540762257,
        61 => 0.046665086336880094719515,
        62 => 0.048171824226889418951725,
        63 => 0.049706565984127232260548,
        64 => 0.051269458374043237747220,
        65 => 0.052860647023180246106833,
        66 => 0.054480276442442368556307,
        67 => 0.056128490049600091027493,
        68 => 0.057805430191067229406254,
        69 => 0.059511238162981199006918,
        70 => 0.061246054231617608198945,
        71 => 0.063010017653167674223091,
        72 => 0.064803266692905772683453,
        73 => 0.066625938643772891767370,
        74 => 0.068478169844400166299536,
        75 => 0.070360095696595875702783,
        76 => 0.072271850682317478886674,
        77 => 0.074213568380149627645714,
        78 => 0.076185381481307851148088,
        79 => 0.078187421805186327339321,
        80 => 0.080219820314468323618762,
        81 => 0.082282707129814794400069,
        82 => 0.084376211544148815857369,
        83 => 0.086500462036549763400473,
        84 => 0.088655586285772941534944,
        85 => 0.090841711183407683471991,
        86 => 0.093058962846687451331285,
        87 => 0.095307466630964704501494,
        88 => 0.097587347141862457178263,
        89 => 0.099898728247113890987841,
        90 => 0.102241733088101319215646,
        91 => 0.104616484091104189335653,
        92 => 0.107023102978267614648900,
        93 => 0.109461710778299331492391,
        94 => 0.111932427836905601381545,
        95 => 0.114435373826973732502843,
        96 => 0.116970667758510837863639,
        97 => 0.119538427988345616337362,
        98 => 0.122138772229601871854854,
        99 => 0.124771817560950487591143,
        100 => 0.127437680435647432419799,
        101 => 0.130136476690364294439561,
        102 => 0.132868321553817975155809,
        103 => 0.135633329655205664421302,
        104 => 0.138431615032451826863280,
        105 => 0.141263291140271640689008,
        106 => 0.144128470858057772252536,
        107 => 0.147027266497594982785913,
        108 => 0.149959789810608562499183,
        109 => 0.152926151996150172518441,
        110 => 0.155926463707827395177574,
        111 => 0.158960835060880406599537,
        112 => 0.162029375639110989615332,
        113 => 0.165132194501667606267858,
        114 => 0.168269400189690748748106,
        115 => 0.171441100732822593322169,
        116 => 0.174647403655585037318687,
        117 => 0.177888415983629116778886,
        118 => 0.181164244249860217905734,
        119 => 0.184474994500440997446944,
        120 => 0.187820772300677868438257,
        121 => 0.191201682740791384373935,
        122 => 0.194617830441575795363818,
        123 => 0.198069319559948858744391,
        124 => 0.201556253794397066680943,
        125 => 0.205078736390316929139033,
        126 => 0.208636870145255753916658,
        127 => 0.212230757414055226650618,
        128 => 0.215860500113899261842576,
        129 => 0.219526199729269205773718,
        130 => 0.223227957316808500731753,
        131 => 0.226965873510098364862486,
        132 => 0.230740048524349150582680,
        133 => 0.234550582161005216619287,
        134 => 0.238397573812271001969521,
        135 => 0.242281122465554860090364,
        136 => 0.246201326707835482787701,
        137 => 0.250158284729953439562422,
        138 => 0.254152094330826749946084,
        139 => 0.258182852921595817896616,
        140 => 0.262250657529696229453009,
        141 => 0.266355604802862466762292,
        142 => 0.270497791013065813636729,
        143 => 0.274677312060384648528810,
        144 => 0.278894263476810400081973,
        145 => 0.283148740429992107348056,
        146 => 0.287440837726917475247745,
        147 => 0.291770649817535865366835,
        148 => 0.296138270798321112664553,
        149 => 0.300543794415776499562298,
        150 => 0.304987314069886272793752,
        151 => 0.309468922817508540479281,
        152 => 0.313988713375717543030419,
        153 => 0.318546778125091856193052,
        154 => 0.323143209112950746675352,
        155 => 0.327778098056542177562989,
        156 => 0.332451536346179354897146,
        157 => 0.337163615048330367329754,
        158 => 0.341914424908660918855929,
        159 => 0.346704056355029599512108,
        160 => 0.351532599500439357775861,
        161 => 0.356400144145943509332852,
        162 => 0.361306779783509501857708,
        163 => 0.366252595598839492119225,
        164 => 0.371237680474149123188710,
        165 => 0.376262122990906500152875,
        166 => 0.381326011432530143085984,
        167 => 0.386429433787049025905702,
        168 => 0.391572477749723257822723,
        169 => 0.396755230725626850674104,
        170 => 0.401977779832195791787086,
        171 => 0.407240211901736703925536,
        172 => 0.412542613483903752857884,
        173 => 0.417885070848137474275319,
        174 => 0.423267669986071681798023,
        175 => 0.428690496613906624201462,
        176 => 0.434153636174748946974233,
        177 => 0.439657173840918791274390,
        178 => 0.445201194516227860553670,
        179 => 0.450785782838223458846016,
        180 => 0.456411023180404662458187,
        181 => 0.462076999654407072348761,
        182 => 0.467783796112158978264262,
        183 => 0.473531496148009545255064,
        184 => 0.479320183100826802125027,
        185 => 0.485149940056070372307317,
        186 => 0.491020849847835616497349,
        187 => 0.496932995060870408288167,
        188 => 0.502886458032568706144616,
        189 => 0.508881320854933760777783,
        190 => 0.514917665376521394016152,
        191 => 0.520995573204354300855812,
        192 => 0.527115125705813092338303,
        193 => 0.533276404010505244990270,
        194 => 0.539479489012107182865918,
        195 => 0.545724461370186597619636,
        196 => 0.552011401512000121627466,
        197 => 0.558340389634267908469667,
        198 => 0.564711505704929228599553,
        199 => 0.571124829464873084994281,
        200 => 0.577580440429650621148028,
        201 => 0.584078417891164103359358,
        202 => 0.590618840919336918204863,
        203 => 0.597201788363763363953751,
        204 => 0.603827338855337791834188,
        205 => 0.610495570807864762485906,
        206 => 0.617206562419651105777518,
        207 => 0.623960391675076109230247,
        208 => 0.630757136346146829453119,
        209 => 0.637596873994032642407603,
        210 => 0.644479681970582141126158,
        211 => 0.651405637419824157241521,
        212 => 0.658374817279448465434655,
        213 => 0.665387298282272054983366,
        214 => 0.672443156957687526720235,
        215 => 0.679542469633093837444449,
        216 => 0.686685312435313499612732,
        217 => 0.693871761291989908038147,
        218 => 0.701101891932973120269423,
        219 => 0.708375779891686763178882,
        220 => 0.715693500506480728695635,
        221 => 0.723055128921969325617169,
        222 => 0.730460740090353666253975,
        223 => 0.737910408772730841420184,
        224 => 0.745404209540387441279563,
        225 => 0.752942216776077866136063,
        226 => 0.760524504675292423172550,
        227 => 0.768151147247506993487320,
        228 => 0.775822218317423595301818,
        229 => 0.783537791526193516666865,
        230 => 0.791297940332630234117062,
        231 => 0.799102738014409008648897,
        232 => 0.806952257669251604710325,
        233 => 0.814846572216101239227726,
        234 => 0.822785754396283541822754,
        235 => 0.830769876774654636442108,
        236 => 0.838799011740740008136186,
        237 => 0.846873231509858048760009,
        238 => 0.854992608124233832711525,
        239 => 0.863157213454102345551178,
        240 => 0.871367119198797168699855,
        241 => 0.879622396887831725642570,
        242 => 0.887923117881966317277431,
        243 => 0.896269353374266386502711,
        244 => 0.904661174391149569551374,
        245 => 0.913098651793419202604696,
        246 => 0.921581856277294608759121,
        247 => 0.930110858375423732447018,
        248 => 0.938685728457888002296272,
        249 => 0.947306536733199866517907,
        250 => 0.955973353249286117438999,
        251 => 0.964686247894465109808948,
        252 => 0.973445290398412543808604,
        253 => 0.982250550333117145029860,
        254 => 0.991102097113829794139406,
        255 => 1.000000000000000000000000,
    ];

    /**
     * @var int
     */
    protected $componentX;

    /**
     * @var int
     */
    protected $componentY;

    /**
     * @var int
     */
    protected $imageWidth;

    /**
     * @var int
     */
    protected $imageHeight;

    /**
     * BlurHash constructor.
     *
     * @param int $componentX
     * @param int $componentY
     * @param int $resizedWidth
     */
    public function __construct(int $componentX = 4, int $componentY = 3, int $resizedWidth = 64)
    {
        $this->setComponentX($componentX)
            ->setComponentY($componentY)
            ->setResizedImageMaxWidth($resizedWidth);
    }

    /**
     * Encode an image to blurhash.
     *
     * @param mixed $data
     *
     * @return string
     */
    public function encode($data): string
    {
        $ac = $this->transform(
            $this->colors(
                $this->image($data)
            )
        );

        /** @var array<float> $dc */
        $dc = array_shift($ac);

        $hash = Base83::encode($this->componentX - 1 + ($this->componentY - 1) * 9, 1);

        $maximum = 1;

        if (!count($ac)) {
            $hash .= Base83::encode(0, 1);
        } else {
            $actual = max(array_map('max', $ac));

            $quantised = max(0, min(82, intval($actual * 166 - 0.5)));

            $maximum = ($quantised + 1) / 166;

            $hash .= Base83::encode($quantised, 1);
        }

        $hash .= Base83::encode(($this->toRGB($dc[0]) << 16) + ($this->toRGB($dc[1]) << 8) + $this->toRGB($dc[2]), 4);

        foreach ($ac as $factor) {
            $hash .= Base83::encode(self::encodeAc($factor, $maximum), 2);
        }

        return $hash;
    }

    /**
     * Get resized image resource.
     *
     * @param mixed $data
     *
     * @return resource
     */
    protected function image($data)
    {
        $image = (new ImageManager(['driver' => 'gd']))
            ->make($data)
            ->widen($this->imageWidth, function (Constraint $constraint) {
                $constraint->upsize();
            });

        $this->imageWidth = $image->width();

        $this->imageHeight = $image->height();

        return $image->getCore();
    }

    /**
     * Get image colors for every pixel.
     *
     * @param resource $resource
     *
     * @return array<array<array<float>>>
     */
    protected function colors($resource): array
    {
        $colors = [];

        for ($x = 0; $x < $this->imageWidth; ++$x) {
            $colors[$x] = [];

            for ($y = 0; $y < $this->imageHeight; ++$y) {
                /*
                 * Use imagecolorsforindex will be slower than binary operation.
                 *
                 * https://www.php.net/manual/en/function.imagecolorsforindex.php#79459
                 * https://www.php.net/manual/en/function.imagecolorat.php#example-3799
                 */

                $rgb = imagecolorat($resource, $x, $y);

                $colors[$x][$y] = [
                    self::$rgbToLinearMap[($rgb >> 16) & 0xFF],
                    self::$rgbToLinearMap[($rgb >> 8) & 0xFF],
                    self::$rgbToLinearMap[$rgb & 0xFF],
                ];
            }
        }

        return $colors;
    }

    /**
     * Magic transform function.
     *
     * I don't know the meaning of math calculation.
     *
     * @param array<array<array<float>>> $colors
     *
     * @return array<array<float>>
     */
    protected function transform(array $colors): array
    {
        $factors = [];

        $scale = 1 / ($this->imageWidth * $this->imageHeight);

        for ($y = 0; $y < $this->componentY; ++$y) {
            $yHeight = M_PI * $y / $this->imageHeight;

            for ($x = 0; $x < $this->componentX; ++$x) {
                $normalisation = $x === 0 && $y === 0 ? 1 : 2;

                $xWidth = M_PI * $x / $this->imageWidth;

                $r = $g = $b = 0;

                for ($i = 0; $i < $this->imageWidth; ++$i) {
                    $cosWidth = $normalisation * cos($xWidth * $i);

                    for ($j = 0; $j < $this->imageHeight; ++$j) {
                        $basis = $cosWidth * cos($yHeight * $j);

                        $color = $colors[$i][$j];

                        $r += $basis * $color[0];
                        $g += $basis * $color[1];
                        $b += $basis * $color[2];
                    }
                }

                $factors[] = [$r * $scale, $g * $scale, $b * $scale];
            }
        }

        return $factors;
    }

    /**
     * Convert linear to RGB.
     *
     * @param float $value
     *
     * @return int
     */
    protected function toRGB(float $value): int
    {
        $value = max(0, min(1, $value));

        if ($value <= 0.0031308) {
            $value = $value * 12.92 * 255 + 0.5;
        } else {
            $value = (1.055 * pow($value, 1 / 2.4) - 0.055) * 255 + 0.5;
        }

        return intval(round($value));
    }

    /**
     * Encode ac factor.
     *
     * @param array<float> $color
     * @param float $max
     *
     * @return int
     */
    protected function encodeAc(array $color, float $max): int
    {
        $r = $this->pow($color[0] / $max);

        $g = $this->pow($color[1] / $max);

        $b = $this->pow($color[2] / $max);

        return $r * 19 * 19 + $g * 19 + $b;
    }

    /**
     * Magic pow function.
     *
     * @param float $value
     *
     * @return int
     */
    protected function pow(float $value): int
    {
        $pow = ($value < 0 ? -1 : 1) * pow(abs($value), 0.5);

        return max(0, min(18, intval($pow * 9 + 9.5)));
    }

    /**
     * Set component x.
     *
     * @param int $componentX
     *
     * @return BlurHash
     */
    public function setComponentX(int $componentX): self
    {
        $this->componentX = $this->normalizeComponent($componentX);

        return $this;
    }

    /**
     * Set component y.
     *
     * @param int $componentY
     *
     * @return BlurHash
     */
    public function setComponentY(int $componentY): self
    {
        $this->componentY = $this->normalizeComponent($componentY);

        return $this;
    }

    /**
     * Restrict component value between 1 and 9.
     *
     * @param int $value
     *
     * @return int
     */
    protected function normalizeComponent(int $value): int
    {
        return max(1, min(9, $value));
    }

    /**
     * Set resized image max width.
     *
     * @param int $imageWidth
     *
     * @return BlurHash
     */
    public function setResizedImageMaxWidth(int $imageWidth): self
    {
        $this->imageWidth = $imageWidth;

        return $this;
    }
}
